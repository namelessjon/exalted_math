module Exalted
grammar Maths

  rule additive
    multitive  '+' space  additive {
      def ast
        Ast.add(multitive.ast, additive.ast )
      end
   }
  / multitive  '-' space additive {
    def ast
      Ast.sub( multitive.ast, additive.ast )
    end
  }
  / multitive
  end

  rule multitive
    primary '*' space multitive {
       def ast
         Ast.mul(primary.ast, multitive.ast )
       end
    }
    /
    primary '/' space multitive {
       def ast
         Ast.div( primary.ast, multitive.ast )
       end
    }
    / primary
  end

  rule primary
    '(' space additive ')' space {
        def ast
          additive.ast
        end
    }
    / number / spec / max / min / stat
  end

  rule spec
    [Ss] 'pec' 'iality'? ':"' speciality:[^"]+ '"' space {
      def value
        speciality.text_value
      end

      def ast
        Ast.spec(value)
      end
    }
  end

  rule max
    ( 'max' / 'highest' ) num:(  '[' number ']' )?  '('  list   ')' {
       def count
         if num.elements
           num.elements.detect { |e| e.respond_to?(:value) }.value
         else
           1
         end
       end

       def ast
         Ast.max( count, list.asts )
       end
    }
  end

  rule min
    ( 'min' / 'lowest' ) num:(  '[' number ']' )?  '('  list   ')' {
       def count
         if num.elements
           num.elements.detect { |e| e.respond_to?(:value) }.value
         else
           1
         end
       end
       def ast
         Ast.min( count, list.asts )
       end
    }
  end

  rule list
    space ( number / stat ) (  ',' space  ( number / stat ) )*   {
        def dig(values, elements)
          elements.each do |elem|
            values << elem if elem.respond_to?(:value)
            dig(values, elem.elements) if elem.elements
          end
          values
        end

        def asts
          elem_list = []
          dig(elem_list, elements)
          elem_list.map! { |e| e.ast }
        end
    }
  end

  rule space
    ( " " / "\t" )*
  end

  rule number
    negative:('-')? [1-9] [0-9]* space {
        def value
          text_value.to_i*neg
        end

        def neg
          (negative.elements) ? -1 : 1
        end
        def ast
          Ast.num(value)
        end
    }
  end

  rule stat
    statistic:[A-Za-z]+ space {
        def value
          statistic.text_value.downcase
        end
        def ast
          Ast.stat(value)
        end
    }
  end
end
end
